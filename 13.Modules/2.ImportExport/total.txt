Вот все варианты export, которые мы разобрали в этой и предыдущей главах.

Вы можете проверить себя, читая их и вспоминая, что они означают:

Перед объявлением класса/функции/…:
export [default] class/function/variable ...
Отдельный экспорт:
export {x [as y], ...}.
Реэкспорт:
export {x [as y], ...} from "module"
export * from "module" (не реэкспортирует export default).
export {default [as y]} from "module" (реэкспортирует только export default).
Импорт:

Именованные экспорты из модуля:
import {x [as y], ...} from "module"
Импорт по умолчанию:
import x from "module"
import {default as x} from "module"
Всё сразу:
import * as obj from "module"
Только подключить модуль (его код запустится), но не присваивать его переменной:
import "module"
Мы можем поставить import/export в начало или в конец скрипта, это не имеет значения.

То есть, технически, такая запись вполне корректна:

sayHi();

// ...

import {sayHi} from './say.js'; // импорт в конце файла
На практике импорты, чаще всего, располагаются в начале файла. Но это только для большего удобства.

Обратите внимание, что инструкции import/export не работают внутри {...}.

Условный импорт, такой как ниже, работать не будет:

if (something) {
  import {sayHi} from "./say.js"; // Ошибка: импорт должен быть на верхнем уровне
}
…Но что, если нам в самом деле нужно импортировать что-либо в зависимости от условий? Или в определённое время? Например, загрузить модуль, только когда он станет нужен?

Мы рассмотрим динамические импорты в следующей главе.